{"version":3,"sources":["App.tsx","reportWebVitals.ts","counter/counter.tsx","make-counter/make-counter.tsx","footer/footer.tsx","index.tsx"],"names":["App","className","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Counter","props","state","step","stepValue","defaultStep","makeRunDisable","valueHolder","this","setState","repeater","setInterval","e","setTimeout","clearInterval","disabled","onClick","makeCount","MakeCounter","makeCounterModel","steps","activeMessage","inputValue","addIsDisabled","message","currentStep","validateFloat","event","split","length","exec","Number","alert","push","type","placeholder","value","onChange","checkUserInput","target","makeCounter","map","Footer","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.08613ed1.chunk.js","sourcesContent":["import React from 'react';\nimport './App.scss';\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div className=\"App\">\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);  \n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n}\n\nexport default reportWebVitals;\n","import React from 'react';\nimport './counter.scss';\n// steps data model for use in component\ninterface Steps {\n    step: number;\n    stepValue: number;\n    defaultStep: number;\n    makeRunDisable: boolean;\n}\nclass Counter extends React.Component<Steps> {\n    state: Steps;\n    constructor(props: Steps) {\n        super(props);\n        this.state = {\n            step: props.step,\n            stepValue: props.stepValue,\n            defaultStep: props.defaultStep,\n            makeRunDisable: props.makeRunDisable\n        }\n    }\n    // this method will fire when you click on run button\n    // valueHolder is for keep begining number\n    // after that run button will disable\n    // repeater will plus counted value with beginig value every second\n    // after seven seconds all states will be as begin state\n    makeCount(stepValue: number): void {\n        let valueHolder: number = stepValue;\n        this.setState({makeRunDisable: true});\n        let repeater = setInterval(e => {\n            this.setState({defaultStep: valueHolder});\n            valueHolder = valueHolder + stepValue;\n        }, 1000);\n        setTimeout(() => {\n            clearInterval(repeater);\n            this.setState({makeRunDisable: false});\n            this.setState({defaultStep: 0});\n        }, 7000);\n    }\n\n    render() {\n        return (\n            <div className=\"counter\">\n                <div className=\"counter__counter-header\">\n                    <span>step {this.state.step}</span>\n                </div>\n                <div className=\"counter__count\">\n                    <h3>{this.state.defaultStep}</h3>\n                </div>\n                <div className=\"counter__run-button-holder\">\n                    <button className=\"counter__run-button\" disabled={this.state.makeRunDisable} onClick={(e) => this.makeCount(this.state.stepValue)}>Run</button>\n                </div>\n            </div>\n        )\n    }\n}\n\n\n\nexport default Counter;","import React from 'react';\nimport './make-counter.scss';\nimport Counter from '../counter/counter';\n// steps data model\ninterface Steps {\n    step: number;\n    stepValue: number;\n}\n// make counter component data model\ninterface MakeCounterModel {\n    steps: Steps[];\n    message: string;\n    currentStep: number;\n    stepValue: number;\n    validateFloat: string;\n}\n  \nclass MakeCounter extends React.Component{\n    makeCounterModel: MakeCounterModel;\n    state: {steps: Steps[], activeMessage: string, inputValue: string, addIsDisabled: boolean};\n    constructor(\n            props: Steps\n        ) {\n        super(props);\n        this.state = {\n            steps: [],\n            activeMessage: '',\n            inputValue: '',\n            addIsDisabled: true\n        };\n        this.makeCounterModel = {\n            steps: [],\n            message: 'This only accepts numbers like 1, 2, -5, 3.8, 310',\n            currentStep: 1,\n            stepValue: 0,\n            validateFloat: ''\n        }\n    };\n    // on input change this method will fire\n    // have a regex for validate input to get just numbers with + and - signs and . for floating numbers\n    // ater that detect if input have floating number and this floating number length is bigger than one\n    // make input clear and add button disable and the hint text will moving\n    // but if regex is pass\n    // make add button enable and input value is set\n    // in another ways add button is disable and hint message is moving and input is clear\n    checkUserInput(event: string): void {\n        const validate: RegExp = /^[0-9 ()+-]+\\.?[0-9]*$/;\n        if (event.split('.')[1]) {\n            this.makeCounterModel.validateFloat = event.split('.')[1];\n            if (this.makeCounterModel.validateFloat.length >= 2) {\n                this.setState({inputValue: '',activeMessage: 'make-counter-parent__message--active', addIsDisabled: true});\n                return;\n            }\n        }\n        if (validate.exec(event)) {\n            this.makeCounterModel.stepValue = Number(event);\n            this.setState({inputValue: event,activeMessage: 'false', addIsDisabled: false});\n            return;\n        } else {\n            this.setState({inputValue: '',activeMessage: 'make-counter-parent__message--active', addIsDisabled: true});\n            return;\n        }\n    };\n    // this method will fire by clicking on add button\n    // make add button disable input value empty and hint message fix\n    // if you generate more than eight counter i will say to you is enough\n    // every time current step will increase\n    // step and value will pushed in steps array \n    // steps array will change the state\n    makeCounter(currentStep: number, stepValue: number): void {\n        this.setState({inputValue: '',activeMessage: '', addIsDisabled: true});\n        if (this.makeCounterModel.currentStep > 8) {\n            alert('this is enough');\n            return;\n        }\n        ++this.makeCounterModel.currentStep;\n        this.makeCounterModel.steps.push({step: currentStep, stepValue: stepValue});\n        this.setState({\n            steps: this.makeCounterModel.steps\n        });\n    }\n\n    render() {\n        return (\n            <>\n                <section className=\"make-counter-parent\">\n                    <div className=\"make-counter-parent__counter-maker-holder\">\n                        <input className=\"make-counter-parent__steps-input\" type=\"text\"\n                            placeholder=\"enter steps value ...\"\n                            value={this.state.inputValue}\n                            onChange={(e) => this.checkUserInput(e.target.value)} />\n                        <button className=\"make-counter-parent__maker-button\"\n                                disabled={this.state.addIsDisabled}\n                                onClick={(e) => this.makeCounter(this.makeCounterModel.currentStep,\n                                this.makeCounterModel.stepValue)}>Add counter</button>\n                    </div>\n                    <div className={`make-counter-parent__message ${this.state.activeMessage}`}>\n                        {this.makeCounterModel.message}\n                    </div>\n                </section>\n                <section className=\"counter-parent\">\n                    {/* dynamicaly generate instance of counter component with deffrent states */}\n                    {\n                        this.state.steps.map((step) => <Counter step={step.step} stepValue={step.stepValue} defaultStep={0} makeRunDisable={false} />)\n                    }\n                </section>\n            </>\n        )\n    }\n}\n\n\n\n\nexport default MakeCounter;","import React from 'react';\nimport './footer.scss';\n\nclass Footer extends React.Component{\n\n    render() {\n        return(\n            // i had another code challenge and this project is done in two days, im not exaggerating :), this is monday 5 in the morning\n            <section className=\"footer\">\n                <span>I did not do the project in react before, but made with love and deep search in <b>\"two\"</b> days, hope to enjoy :)</span>\n            </section>\n        )\n    }\n}\n\n\nexport default Footer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport MakeCounter from './make-counter/make-counter';\nimport Footer from './footer/footer';\n\nReactDOM.render(\n  <React.StrictMode>\n    <MakeCounter />\n    <Footer />\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}